{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nexport default function AddCommentForm({\n  blogId,\n  parentCommentId,\n  firstParentId\n}) {\n  const {\n    0: isSending,\n    1: setIsSending\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = async data => {\n    setIsSending(true);\n    data.blogId = blogId;\n    console.log(data);\n\n    if (parentCommentId) {\n      data.parentCommentId = parentCommentId;\n      data.firstParentId = firstParentId;\n    }\n\n    try {\n      const res = await axios.post(\"/api/addComment\", data);\n      console.log(res);\n      setIsSending(false);\n    } catch (err) {\n      console.log(err);\n      setError(prev => err);\n      setIsSending(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"comment-form\",\n    children: [/*#__PURE__*/_jsx(\"input\", _objectSpread({\n      type: \"text\",\n      placeholder: \"Name (Optional)\"\n    }, register(\"name\", {\n      required: false,\n      maxLength: 80\n    }))), /*#__PURE__*/_jsx(\"input\", _objectSpread({\n      type: \"text\",\n      placeholder: \"Email (Optional)\"\n    }, register(\"email\", {\n      required: false,\n      pattern: /^\\S+@\\S+$/i\n    }))), errors && errors.email && /*#__PURE__*/_jsx(\"span\", {\n      children: \"Invalid email\"\n    }), /*#__PURE__*/_jsx(\"textarea\", _objectSpread({\n      placeholder: \"Your Comment\",\n      rows: \"5\"\n    }, register(\"comment\", {\n      required: true,\n      maxLength: 5000\n    }))), errors && errors.comment && /*#__PURE__*/_jsx(\"span\", {\n      children: \"You need to write something\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"button-input--comment\",\n      children: /*#__PURE__*/_jsx(\"input\", {\n        type: \"submit\",\n        disabled: isSending,\n        value: isSending ? \"Posting...\" : \"Post Comment\"\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}