{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/uw/Desktop/site/ahmed-khelili-blog/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"C:/Users/uw/Desktop/site/ahmed-khelili-blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:/Users/uw/Desktop/site/ahmed-khelili-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useEffect, createContext } from \"react\";\nimport Comment from \"./SingleComment\";\nimport { writeClient as client } from \"../../lib/sanityClient\";\nvar ReactionsContext = /*#__PURE__*/createContext(undefined);\n\nvar AllComments = function AllComments(_ref) {\n  var blogId = _ref.blogId;\n  console.log(blogId);\n  var query = \"*[_type == \\\"comment\\\" && approved==true && _blogId == \\\"\".concat(blogId, \"\\\" ]{_id, comment, name, _createdAt, _blogId, childComments} | order (_createdAt)\");\n  var querySub = undefined;\n\n  var _useState = useState(),\n      comments = _useState[0],\n      setComments = _useState[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setComments;\n            _context.next = 3;\n            return client.fetch(query);\n\n          case 3:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n            // Subscribe to the query, listening to new updates\n            // If there's an update, add it to the comments state and sort it again\n            // The update might occur on a comment we already have in the state,\n            // so we should filter out that comment from the previous state\n            querySub = client.listen(query).subscribe(function (update) {\n              if (update) {\n                setComments(function (comments) {\n                  return [].concat(_toConsumableArray(comments.filter(function (comment) {\n                    return comment._id !== update.result._id;\n                  })), [update.result]).sort(function (a, b) {\n                    return a._createdAt > b._createdAt ? 1 : -1;\n                  });\n                });\n                console.log(comments);\n              }\n            }); // Unsubscribe on Component unmount\n\n            return _context.abrupt(\"return\", function () {\n              querySub.unsubscribe();\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [querySub]);\n  return /*#__PURE__*/_jsx(\"ul\", {\n    children: comments === null || comments === void 0 ? void 0 : comments.map(function (comment) {\n      return /*#__PURE__*/_jsx(Comment, {\n        comment: comment,\n        firstParentId: comment.firstParentId || comment._id\n      }, comment._id);\n    })\n  });\n};\n\nexport default AllComments;\nexport { ReactionsContext };","map":null,"metadata":{},"sourceType":"module"}