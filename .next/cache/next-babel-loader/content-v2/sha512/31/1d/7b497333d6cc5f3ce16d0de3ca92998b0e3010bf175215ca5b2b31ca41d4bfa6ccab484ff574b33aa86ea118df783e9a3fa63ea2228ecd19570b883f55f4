{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"C:/Users/uw/Desktop/site/ahmed-khelili-blog/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { nanoid } from \"nanoid\";\nimport EmojiWithCounter from \"./EmojiWithCounter\"; // import getKey from \"../../lib/keyGen\";\n\nimport EmojiAdder from \"./EmojiAdder\";\nimport { ReactionsContext } from \"../Comments\";\nimport { writeClient as client } from \"../../../lib/sanityClient\";\nimport { DEFAULT_EMOJI_OPTIONS } from \"../../../lib/emojiConfig\";\nvar dbDebouncerTimer;\n\nvar ReactionBlock = function ReactionBlock(_ref) {\n  var _useContext, _useContext$filter$ma;\n\n  var commentId = _ref.commentId;\n  // We get the initial reactions we previously fetched from the Context\n  var contextReactions = (_useContext = useContext(ReactionsContext)) === null || _useContext === void 0 ? void 0 : (_useContext$filter$ma = _useContext.filter(function (r) {\n    return r.commentId === commentId;\n  }).map(function (r) {\n    return r.reactions;\n  })) === null || _useContext$filter$ma === void 0 ? void 0 : _useContext$filter$ma.sort(function (a, b) {\n    return a.counter < b.counter ? 1 : -1;\n  })[0];\n\n  var _useState = useState([]),\n      reactions = _useState[0],\n      setReactions = _useState[1];\n\n  var _useState2 = useState(false),\n      shouldUpdateDb = _useState2[0],\n      setShouldUpdateDb = _useState2[1];\n\n  var querySub = undefined;\n  useEffect(function () {\n    // If there are reactions in the context, set them\n    if (contextReactions) setReactions(contextReactions); // Subscribe to the query Observable and update the state on each update\n\n    var query = \"*[_type == \\\"commentReactions\\\" && commentId==\\\"\".concat(commentId, \"\\\"]\");\n    querySub = client.listen(query).subscribe(function (update) {\n      if (update) {\n        setReactions(_toConsumableArray(update.result.reactions.sort(function (a, b) {\n          return a.counter < b.counter ? 1 : -1;\n        })));\n      }\n    }); // Unsubscribe on Component unmount\n\n    return function () {\n      querySub.unsubscribe();\n    };\n  }, []);\n  useEffect(function () {\n    if (shouldUpdateDb) updateReactionsOnDatabase();\n    setShouldUpdateDb(false);\n  }, [shouldUpdateDb]); // Onclick, update the emoji counter and start a timer to update the database\n\n  var updateEmojiCount = function updateEmojiCount(emoji) {\n    setShouldUpdateDb(false);\n    var emojiFromState = reactions.filter(function (em) {\n      return em.emoji === emoji;\n    })[0];\n\n    if (!emojiFromState) {\n      emojiFromState = DEFAULT_EMOJI_OPTIONS.filter(function (em) {\n        return em.emoji === emoji;\n      })[0];\n      emojiFromState.counter = 1;\n      setReactions(function (reactions) {\n        return [].concat(_toConsumableArray(reactions), [emojiFromState]).sort(function (a, b) {\n          return a.counter < b.counter ? 1 : -1;\n        });\n      });\n    } else {\n      emojiFromState.counter++;\n      setReactions(function (reactions) {\n        return [].concat(_toConsumableArray(reactions.filter(function (rea) {\n          return rea.emoji !== emojiFromState.emoji;\n        })), [emojiFromState]).sort(function (a, b) {\n          return a.counter < b.counter ? 1 : -1;\n        });\n      });\n    }\n\n    setShouldUpdateDb(true);\n  }; // Debouncer to avoid updating the database on every click\n\n\n  var updateReactionsOnDatabase = function updateReactionsOnDatabase() {\n    clearTimeout(dbDebouncerTimer);\n    dbDebouncerTimer = setTimeout(function () {\n      axios.post(\"/api/addReaction\", {\n        commentId: commentId,\n        reactions: reactions\n      });\n      dbDebouncerTimer = null;\n    }, 1000 * 1);\n  };\n\n  var mappedReactions = reactions.map(function (reaction) {\n    return /*#__PURE__*/_jsx(EmojiWithCounter, {\n      emoji: reaction.emoji,\n      emojiLabel: reaction,\n      initialCounter: reaction.counter,\n      onIncrease: updateEmojiCount\n    }, nanoid());\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"reaction-block\",\n    children: [mappedReactions, /*#__PURE__*/_jsx(EmojiAdder, {\n      selectedEmojis: reactions,\n      updateEmojiCount: updateEmojiCount,\n      EMOJI_OPTIONS: DEFAULT_EMOJI_OPTIONS\n    })]\n  });\n};\n\nexport default ReactionBlock;","map":null,"metadata":{},"sourceType":"module"}